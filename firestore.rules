rules_version = '2';
// TODO: Definir as próprias regras de banco de dados
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isSignedIn() {
      return request.auth != null;
    }

    function idsMatch(userId) {
      return request.auth.uid == userId;
    }

    // Regra padrão: negar tudo
    match /{document=**} {
      allow read, write: if false;
    }

    // Regras para a coleção users
    match /users/{userId} {
      allow read: if isSignedIn() && idsMatch(userId);
      allow create: if isSignedIn() && idsMatch(userId);
      allow update: if isSignedIn() && idsMatch(userId);
      allow delete: if false;

      // Regras para a subcoleção health_records
      match /health_records/{recordId} {
        allow read: if isSignedIn() && idsMatch(userId);
        allow create: if isSignedIn() && idsMatch(userId);
        allow update: if isSignedIn() && idsMatch(userId);
        allow delete: if isSignedIn() && idsMatch(userId);
      }
    }

    // Regras para a coleção dashboards
    match /dashboards/{userId} {
      allow read: if isSignedIn() && idsMatch(userId);
      allow create: if isSignedIn() && idsMatch(userId);
      allow update: if isSignedIn() && idsMatch(userId);
      allow delete: if false;
    }

    // Regras para a coleção activities
    match /activities/{activityId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Regras para a coleção health_records
    match /health_records/{recordId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Regras para a coleção training_progress
    match /training_progress/{progressId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Regras para a coleção referrals2
    match /referrals2/{referralId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Regras para a coleção tokens
    match /tokens/{userId} {
      allow read: if isSignedIn() && idsMatch(userId);
      allow create: if isSignedIn() && idsMatch(userId);
      allow update: if isSignedIn() && idsMatch(userId);
      allow delete: if isSignedIn() && idsMatch(userId);
    }
  }
}