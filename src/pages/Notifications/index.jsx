import React, { useState, useEffect } from 'react';
import { Bell, BellOff, CheckCircle2, XCircle } from 'lucide-react';
import { useAuthContext } from '../../hooks/useAuthContext';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase/config';
import { useToast } from "@/shadcn/components/ui/use-toast";
import './styles.css';

const Notifications = () => {
  const { user } = useAuthContext();
  const { toast } = useToast();
  const [settings, setSettings] = useState({
    foodReminders: false,
    walkReminders: false,
    trainingReminders: false,
    vaccineReminders: false,
    generalUpdates: false
  });
  const [loading, setLoading] = useState(true);
  const [saveStatus, setSaveStatus] = useState(null);
  const [notificationPermission, setNotificationPermission] = useState('default');

  // Verifica a permiss√£o de notifica√ß√£o do navegador
  useEffect(() => {
    const checkNotificationPermission = async () => {
      if ('Notification' in window) {
        const permission = await Notification.permission;
        setNotificationPermission(permission);
      }
    };

    checkNotificationPermission();
  }, []);

  // Carrega as configura√ß√µes do usu√°rio do Firestore
  useEffect(() => {
    const fetchSettings = async () => {
      if (user) {
        try {
          const userDoc = await getDoc(doc(db, 'users', user.uid));
          if (userDoc.exists() && userDoc.data().notificationSettings) {
            setSettings(userDoc.data().notificationSettings);
          }
        } catch (error) {
          console.error('Error fetching notification settings:', error);
          toast({
            variant: "destructive",
            title: "Erro ao carregar configura√ß√µes",
            description: "N√£o foi poss√≠vel carregar suas prefer√™ncias de notifica√ß√£o."
          });
        } finally {
          setLoading(false);
        }
      }
    };

    fetchSettings();
  }, [user]);

  // Solicita permiss√£o para notifica√ß√µes do navegador
  const requestNotificationPermission = async () => {
    if ('Notification' in window) {
      try {
        const permission = await Notification.requestPermission();
        setNotificationPermission(permission);
        
        if (permission === 'granted') {
          toast({
            title: "Notifica√ß√µes ativadas",
            description: "Voc√™ receber√° notifica√ß√µes sobre as atividades do seu pet."
          });
        } else {
          toast({
            variant: "destructive",
            title: "Permiss√£o negada",
            description: "Voc√™ precisa permitir notifica√ß√µes nas configura√ß√µes do seu navegador."
          });
        }
      } catch (error) {
        console.error('Error requesting notification permission:', error);
        toast({
          variant: "destructive",
          title: "Erro",
          description: "N√£o foi poss√≠vel solicitar permiss√£o para notifica√ß√µes."
        });
      }
    }
  };

  // Atualiza as configura√ß√µes de notifica√ß√£o
  const handleToggle = async (setting) => {
    console.log('Iniciando handleToggle para:', setting);
    console.log('Estado atual:', settings[setting]);
    console.log('Permiss√£o de notifica√ß√£o:', notificationPermission);

    if (notificationPermission !== 'granted') {
      console.log('Solicitando permiss√£o de notifica√ß√£o...');
      await requestNotificationPermission();
      if (notificationPermission !== 'granted') {
        console.log('Permiss√£o de notifica√ß√£o n√£o concedida');
        return;
      }
    }

    const newSettings = { ...settings, [setting]: !settings[setting] };
    console.log('Novas configura√ß√µes:', newSettings);
    setSettings(newSettings);

    if (user) {
      try {
        console.log('Atualizando configura√ß√µes no Firestore...');
        await updateDoc(doc(db, 'users', user.uid), {
          notificationSettings: newSettings
        });
        console.log('Configura√ß√µes atualizadas com sucesso no Firestore');
        setSaveStatus('success');
        
        // Envia uma notifica√ß√£o de teste quando ativa
        if (newSettings[setting]) {
          console.log('Enviando notifica√ß√£o de teste...');
          const notificationTitles = {
            foodReminders: 'üçΩÔ∏è Lembrete de Alimenta√ß√£o',
            walkReminders: 'ü¶Æ Lembrete de Passeio',
            trainingReminders: 'üéØ Lembrete de Treinamento',
            vaccineReminders: 'üíâ Lembrete de Vacina',
            generalUpdates: 'üì¢ Atualiza√ß√£o Geral'
          };
          sendTestNotification(notificationTitles[setting]);
        }

        toast({
          title: "Configura√ß√µes salvas",
          description: "Suas prefer√™ncias de notifica√ß√£o foram atualizadas."
        });

        setTimeout(() => setSaveStatus(null), 3000);
      } catch (error) {
        console.error('Erro ao atualizar configura√ß√µes:', error);
        setSaveStatus('error');
        toast({
          variant: "destructive",
          title: "Erro ao salvar",
          description: "N√£o foi poss√≠vel salvar suas prefer√™ncias de notifica√ß√£o."
        });
        setTimeout(() => setSaveStatus(null), 3000);
      }
    } else {
      console.log('Usu√°rio n√£o autenticado');
    }
  };

  // Fun√ß√£o para enviar uma notifica√ß√£o de teste
  const sendTestNotification = (title) => {
    console.log('Tentando enviar notifica√ß√£o:', title);
    if (notificationPermission === 'granted') {
      console.log('Permiss√£o concedida, criando notifica√ß√£o...');
      try {
        const notification = new Notification(title, {
          body: 'Esta √© uma notifica√ß√£o de teste para verificar se est√° funcionando.',
          icon: '/favicon.ico'
        });
        console.log('Notifica√ß√£o criada com sucesso:', notification);
      } catch (error) {
        console.error('Erro ao criar notifica√ß√£o:', error);
      }
    } else {
      console.log('Permiss√£o de notifica√ß√£o n√£o concedida');
    }
  };

  if (loading) {
    return (
      <div className="notifications-container">
        <div className="loading">Carregando configura√ß√µes...</div>
      </div>
    );
  }

  return (
    <div className="notifications-container">
      <h1>Configura√ß√µes de Notifica√ß√µes</h1>
      <p className="description">
        Gerencie suas prefer√™ncias de notifica√ß√µes para receber alertas sobre atividades do seu pet.
        {notificationPermission !== 'granted' && (
          <button 
            className="permission-button"
            onClick={requestNotificationPermission}
          >
            Permitir Notifica√ß√µes
          </button>
        )}
      </p>

      <div className="settings-grid">
        <div 
          className={`setting-item ${settings.foodReminders ? 'active' : ''}`}
          onClick={() => handleToggle('foodReminders')}
          role="button"
          tabIndex={0}
          onKeyPress={(e) => e.key === 'Enter' && handleToggle('foodReminders')}
        >
          <div className="setting-info">
            <Bell className="setting-icon" />
            <div>
              <h3>Lembretes de Alimenta√ß√£o</h3>
              <p>Receba notifica√ß√µes sobre hor√°rios de alimenta√ß√£o</p>
            </div>
          </div>
          <div className="toggle-indicator">
            {settings.foodReminders ? <Bell /> : <BellOff />}
          </div>
        </div>

        <div 
          className={`setting-item ${settings.walkReminders ? 'active' : ''}`}
          onClick={() => handleToggle('walkReminders')}
          role="button"
          tabIndex={0}
          onKeyPress={(e) => e.key === 'Enter' && handleToggle('walkReminders')}
        >
          <div className="setting-info">
            <Bell className="setting-icon" />
            <div>
              <h3>Lembretes de Passeio</h3>
              <p>Alertas para hor√°rios de passeio</p>
            </div>
          </div>
          <div className="toggle-indicator">
            {settings.walkReminders ? <Bell /> : <BellOff />}
          </div>
        </div>

        <div 
          className={`setting-item ${settings.trainingReminders ? 'active' : ''}`}
          onClick={() => handleToggle('trainingReminders')}
          role="button"
          tabIndex={0}
          onKeyPress={(e) => e.key === 'Enter' && handleToggle('trainingReminders')}
        >
          <div className="setting-info">
            <Bell className="setting-icon" />
            <div>
              <h3>Lembretes de Treinamento</h3>
              <p>Notifica√ß√µes sobre sess√µes de treinamento</p>
            </div>
          </div>
          <div className="toggle-indicator">
            {settings.trainingReminders ? <Bell /> : <BellOff />}
          </div>
        </div>

        <div 
          className={`setting-item ${settings.vaccineReminders ? 'active' : ''}`}
          onClick={() => handleToggle('vaccineReminders')}
          role="button"
          tabIndex={0}
          onKeyPress={(e) => e.key === 'Enter' && handleToggle('vaccineReminders')}
        >
          <div className="setting-info">
            <Bell className="setting-icon" />
            <div>
              <h3>Lembretes de Vacinas</h3>
              <p>Alertas para datas de vacina√ß√£o</p>
            </div>
          </div>
          <div className="toggle-indicator">
            {settings.vaccineReminders ? <Bell /> : <BellOff />}
          </div>
        </div>

        <div 
          className={`setting-item ${settings.generalUpdates ? 'active' : ''}`}
          onClick={() => handleToggle('generalUpdates')}
          role="button"
          tabIndex={0}
          onKeyPress={(e) => e.key === 'Enter' && handleToggle('generalUpdates')}
        >
          <div className="setting-info">
            <Bell className="setting-icon" />
            <div>
              <h3>Atualiza√ß√µes Gerais</h3>
              <p>Notifica√ß√µes sobre novidades e dicas</p>
            </div>
          </div>
          <div className="toggle-indicator">
            {settings.generalUpdates ? <Bell /> : <BellOff />}
          </div>
        </div>
      </div>

      {saveStatus === 'success' && (
        <div className="status-message success">
          <CheckCircle2 className="status-icon" />
          Configura√ß√µes salvas com sucesso!
        </div>
      )}
      {saveStatus === 'error' && (
        <div className="status-message error">
          <XCircle className="status-icon" />
          Erro ao salvar configura√ß√µes
        </div>
      )}
    </div>
  );
};

export default Notifications; 